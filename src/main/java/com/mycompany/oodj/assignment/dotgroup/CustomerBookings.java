/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.oodj.assignment.dotgroup;

/**
 *
 * @author Ahmed
 */
import java.time.Duration;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.time.format.DateTimeFormatter;
import java.time.LocalTime;
import java.time.LocalDateTime;

public class CustomerBookings extends javax.swing.JFrame {

    private FileOperation file = FileOperation.getInstance();
    private Customer currentCustomer;
    private Customer defaultCustomer = new Customer("defaultCustomer", "12345");
    private Period selectedPeriod;

    public CustomerBookings(Customer customer) {
        if (customer == null) {
            currentCustomer = defaultCustomer;
        } else {
            currentCustomer = customer;
        }
        initComponents();
        
        updateHallsTable(loadHalls());
        updateHallsCBox(loadHalls());
    }
    
    private ArrayList<Hall> loadHalls(){
        return file.read(FileType.HALLS);
    }
    
    private void updateHallsTable(ArrayList<Hall> halls){
        DefaultTableModel model = (DefaultTableModel)tblHalls.getModel();
        model.setRowCount(0);
        for (Hall h : halls){
            model.addRow(new Object[]{h.getName(), h.getHourlyRate(), h.getTotalSeats()});
        }
    }
    
    private void updateHallsCBox(ArrayList<Hall> halls){
        cBoxBookingHall.removeAllItems();
        for(Hall h : halls){
            cBoxBookingHall.addItem(h.getName());
        }
    }

    private LocalDate convertToLocalDate(Date d) {
        return d.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    private ArrayList<Period> getPeriodsByLocalDate(LocalDate date) {
        ArrayList<Period> periods = file.read(FileType.SCHEDULE);
        ArrayList<Period> filtered = new ArrayList<>();
        for (Period p : periods) {
            if (!date.isBefore(p.getStartTime().toLocalDate()) && !date.isAfter(p.getEndTime().toLocalDate())) {
                filtered.add(p);
            }
        }
        return filtered;
    }

    private void updatePeriodsTable(ArrayList<Period> periods) {
        DefaultTableModel model = (DefaultTableModel) tblHalls.getModel();
        model.setRowCount(0);

        for (Period p : periods) {
            model.addRow(new Object[]{
                p.getTitle(),
                p.getHall().getName(),
                p.getStartTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                p.getEndTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                p.getType()
            });
        }

        tblHalls.revalidate();
        tblHalls.repaint();
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
    }
    
    private Period getInputBooking(){
        String strHall = cBoxBookingHall.getSelectedItem().toString();
        Hall hall = null;
        ArrayList<Hall> halls = file.read(FileType.HALLS);
        for(Hall h : halls){
            if(h.getName().equals(strHall)){
                hall = h;
                break;
            }
        }
        if(hall == null){
            return null;
        }
        if(txtBookingTitle.getText().isEmpty()){
            return null;
        }
        String title = txtBookingTitle.getText();
        LocalDate date = convertToLocalDate(datePickerBookingDate.getDate());
        LocalTime startTime = LocalTime.of((Integer)spinnerBookingStartHour.getValue(), (Integer)spinnerBookingStartMinute.getValue());
        LocalTime endTime = LocalTime.of((Integer)spinnerBookingEndHour.getValue(), (Integer)spinnerBookingEndMinute.getValue());
        
        LocalDateTime startDateTime = LocalDateTime.of(date, startTime);
        LocalDateTime endDateTime = LocalDateTime.of(date, endTime);
        
        Period p = new Period(startDateTime, endDateTime, hall, PeriodType.BOOKING, null, title, PeriodStatus.ACTIVE, currentCustomer, null);
        return p;
    }
    private void message(String message, String title){
        JOptionPane.showMessageDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE);
    }


    // Event handler for the Proceed Payment button
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaBookingPayment = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        datePickerBookingDate = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCalculatePayment = new javax.swing.JButton();
        spinnerBookingStartHour = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHalls = new javax.swing.JTable();
        spinnerBookingStartMinute = new javax.swing.JSpinner();
        spinnerBookingEndMinute = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        spinnerBookingEndHour = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtBookingTitle = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        cBoxBookingHall = new javax.swing.JComboBox<>();
        btnProceedPayment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(99, 102, 241));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Hall:");

        txtAreaBookingPayment.setColumns(20);
        txtAreaBookingPayment.setRows(5);
        jScrollPane3.setViewportView(txtAreaBookingPayment);

        jLabel3.setText("Select Date:");

        jLabel10.setText("Payment");

        jLabel5.setText("Start Time:");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setText("Create Booking");

        btnCalculatePayment.setText("Calculate Payment");
        btnCalculatePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculatePaymentActionPerformed(evt);
            }
        });

        spinnerBookingStartHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        tblHalls.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Hall Name", "Hourly Rate", "Number of Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHalls);

        spinnerBookingStartMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        spinnerBookingEndMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jLabel8.setText("Available Halls");

        spinnerBookingEndHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Event Title:");

        jLabel6.setText("End Time:");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnProceedPayment.setText("Proceed Payment");
        btnProceedPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedPaymentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnProceedPayment))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBookingTitle)
                                    .addComponent(datePickerBookingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cBoxBookingHall, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnCalculatePayment)
                            .addGap(210, 210, 210))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spinnerBookingStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spinnerBookingStartMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(22, 22, 22)
                                    .addComponent(spinnerBookingEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spinnerBookingEndMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addComponent(jLabel8))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(9, 9, 9))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cBoxBookingHall, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtBookingTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datePickerBookingDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerBookingStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerBookingStartMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerBookingEndMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(spinnerBookingEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack)
                            .addComponent(btnProceedPayment)
                            .addComponent(btnCalculatePayment))))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        CustomerDashboard dashboard = new CustomerDashboard(currentCustomer); // Pass the current customer if needed
        dashboard.setVisible(true);
        this.dispose();         // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnProceedPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedPaymentActionPerformed
        Period booking = getInputBooking();
        if(booking == null){
            return;
        }
        ArrayList<Sale> sales = file.read(FileType.SALES);
        ArrayList<User> users = file.read(FileType.USERS);
        String saleId = String.valueOf(sales.size());
        String customerId = null;
        for(User u : users){
            if(u.getUsername().equals(currentCustomer.getUsername())){
                customerId = String.valueOf(users.indexOf(u));
                break;
            }
        }
        String customerName = currentCustomer.getUsername();
        LocalDate date = LocalDate.now();
        LocalTime time = LocalTime.now();
        String hallType = booking.getHall().getName();
        String description = booking.getTitle();
        Duration duration = Duration.between(booking.getStartTime(), booking.getEndTime());
        int hours = duration.toHoursPart();
        double totalSale = booking.getHall().getHourlyRate() * hours;
        
        Sale s = new Sale(saleId, customerId, customerName, date, time, hallType, description, totalSale);
        
        file.create(s);
        file.create(booking);
        
        message("Payment successful. Your booking has been created.", "Booking Complete");
        
        
        // Get selected start and end dates
        /*
        LocalDate startDate = convertToLocalDate(dtpSelectStartDate.getDate());
        LocalDate endDate = convertToLocalDate(dtpSelectEndDate.getDate());

        // Ensure both dates are selected
        if (startDate == null || endDate == null) {
            JOptionPane.showMessageDialog(this, "Please select both start and end dates.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ensure a preferred hall is selected
        String selectedHallName = (String) cmbPreferredHall.getSelectedItem();
        if (selectedHallName == null || selectedHallName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a preferred hall.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Find the selected hall
        /*
        Hall selectedHall = null;
        ArrayList<Hall> halls = fileOperation.read(FileType.HALLS);
        for (Hall h : halls) {
            if (h.getName().equals(selectedHallName)) {
                selectedHall = h;
                break;
            }
        }

        if (selectedHall == null) {
            JOptionPane.showMessageDialog(this, "Selected hall could not be found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Prepare booking details
        String title = txtTitle.getText().trim();
        if (title.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a title for the booking.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create a booking period object
        selectedPeriod = new Period(
            startDate.atStartOfDay(),
            endDate.atTime(LocalTime.of(23, 59)),
            selectedHall,
            PeriodType.BOOKING,
            title,
            PeriodStatus.PENDING_PAYMENT,
            currentCustomer,
            null
        );

        // Save booking to schedule
        fileOperation.create(selectedPeriod);

        // Show receipt
        txtViewReceipt.setText("Booking Successful!\n" +
            "Title: " + title + "\n" +
            "Hall: " + selectedHall.getName() + "\n" +
            "Start Date: " + startDate + "\n" +
            "End Date: " + endDate + "\n" +
            "Total Cost: $" + (selectedHall.getHourlyRate() * 24));
        */
    }//GEN-LAST:event_btnProceedPaymentActionPerformed

    private void btnCalculatePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculatePaymentActionPerformed
        Period booking = getInputBooking();
        if(booking == null){
            txtAreaBookingPayment.setText("Please ensure all booking information is entered.");
            return;
        }
        Duration duration = Duration.between(booking.getStartTime(), booking.getEndTime());
        int hours = duration.toHoursPart();
        double totalCost = booking.getHall().getHourlyRate() * hours;
        txtAreaBookingPayment.setText(String.format("Total hours: %d\nTotal booking cost: RM%.2f", hours, totalCost));
    }//GEN-LAST:event_btnCalculatePaymentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Customer customer = new Customer("defaultCustomer", "12345");
                new CustomerBookings(customer).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCalculatePayment;
    private javax.swing.JButton btnProceedPayment;
    private javax.swing.JComboBox<String> cBoxBookingHall;
    private com.toedter.calendar.JDateChooser datePickerBookingDate;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner spinnerBookingEndHour;
    private javax.swing.JSpinner spinnerBookingEndMinute;
    private javax.swing.JSpinner spinnerBookingStartHour;
    private javax.swing.JSpinner spinnerBookingStartMinute;
    private javax.swing.JTable tblHalls;
    private javax.swing.JTextArea txtAreaBookingPayment;
    private javax.swing.JTextField txtBookingTitle;
    // End of variables declaration//GEN-END:variables
}
